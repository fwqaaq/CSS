import{_ as s,c as a,o as l,N as e}from"./chunks/framework.8361052b.js";const C=JSON.parse('{"title":"相关介绍","description":"","frontmatter":{},"headers":[],"relativePath":"scss/相关介绍.md"}'),o={name:"scss/相关介绍.md"},i=e(`<h1 id="相关介绍" tabindex="-1">相关介绍 <a class="header-anchor" href="#相关介绍" aria-label="Permalink to &quot;相关介绍&quot;">​</a></h1><h2 id="css预处理器出现的原因" tabindex="-1">CSS预处理器出现的原因 <a class="header-anchor" href="#css预处理器出现的原因" aria-label="Permalink to &quot;CSS预处理器出现的原因&quot;">​</a></h2><ol><li>无法嵌套书写导致代码繁重,冗杂,逻辑混乱.</li><li>没有变量和样式复用机制,属性值只能以字面量的形式重复输出.</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 总结:代码复用性低；不易于维护</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 注:现在,现在的CSS是可以定义变量的！！！</span></span>
<span class="line"></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">root</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    --red</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">f3e1e1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="出名的css预处理器介绍" tabindex="-1">出名的CSS预处理器介绍 <a class="header-anchor" href="#出名的css预处理器介绍" aria-label="Permalink to &quot;出名的CSS预处理器介绍&quot;">​</a></h2><ol><li><code>SCSS/SASS</code><ul><li>SASS (.scss).于2007年诞生,最早也是最成熟的CSS预处理器,拥有ruby社区的支持和compass这一最强大的css框架,目前受LESS影响,已经进化到了全面兼容CSS的SCSS.</li></ul></li><li><code>LESS</code><ul><li>LESS(.less).于2009年诞生,借鉴了SASS的长处,并兼容了CSS语法,使得开发者使用起来更为方便顺手,但是相比于SASS,其编程功能不够丰富,反而促使SASS进化成为了SCSS.</li></ul></li><li><code>Stylus</code><ul><li>Stylus(.styl).于2010年诞生,出自Node.js社区,主要用来给Node项目进行CSS预处理支持,人气较前两者偏低.</li></ul></li></ol><h2 id="scss和sass之间的关系" tabindex="-1">SCSS和SASS之间的关系 <a class="header-anchor" href="#scss和sass之间的关系" aria-label="Permalink to &quot;SCSS和SASS之间的关系&quot;">​</a></h2><p><img src="https://raw.githubusercontent.com/ggdream/scss/master/sources.assets/image-20200706194107318.png" alt="image-20200706194107318"></p><ul><li>简而言之.Sass有两套语法:</li></ul><ol><li><p>第一种或更新的语法被称为SCSS.它是CSS语法的扩展.这意味着每个有效的CSS样式表都是具有相同含义的有效SCSS文件.下文描述的Sass功能增强了此语法.使用此语法的文件扩展名为.scss.</p></li><li><p>第二种或更旧的语法被称为SASS.提供了一种更为简洁的CSS编写方式.它使用缩进而不是方括号来表示选择器的嵌套,并使用换行符而不是分号来分隔属性.使用此语法的文件扩展名为.sass.</p></li></ol><p>任何一种格式可以直接 导入 (@import) 到另一种格式中使用,或者通过 sass-convert 命令行工具转换成另一种格式</p><h2 id="使用css预处理器的优劣" tabindex="-1">使用CSS预处理器的优劣 <a class="header-anchor" href="#使用css预处理器的优劣" aria-label="Permalink to &quot;使用CSS预处理器的优劣&quot;">​</a></h2><ol><li>优点:CSS预处理器为CSS增加一些编程的特性,无需考虑浏览器的兼容性问题.支持嵌套,变量和逻辑等.可以让CSS更加简洁,提高代码复用性,逻辑分明等等</li><li>缺点:css的文件体积和复杂度不可控；增加了调试难度和成本等.</li></ol><h2 id="选择scss的原因" tabindex="-1">选择SCSS的原因 <a class="header-anchor" href="#选择scss的原因" aria-label="Permalink to &quot;选择SCSS的原因&quot;">​</a></h2><ul><li>官方介绍</li></ul><blockquote><p>Sass 是一款强化 CSS 的辅助工具,它在 CSS 语法的基础上增加了变量 (variables),嵌套 (nested rules),混合 (mixins),导入 (inline imports) 等高级功能,这些拓展令 CSS 更加强大与优雅.使用 Sass 以及 Sass 的样式库（如 Compass）有助于更好地组织管理样式文件,以及更高效地开发项目.</p></blockquote><ul><li>特色功能 <ul><li>完全兼容 CSS3</li><li>在 CSS 基础上增加变量,嵌套(nesting),混合 (mixins) 等功能</li><li>通过函数进行颜色值与属性值的运算</li><li>提供控制指令(control directives)等高级功能</li><li>自定义输出格式</li></ul></li></ul>`,18),n=[i];function S(t,c,r,p,d,u){return l(),a("div",null,n)}const _=s(o,[["render",S]]);export{C as __pageData,_ as default};

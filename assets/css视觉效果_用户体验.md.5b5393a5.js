import{_ as l,c as s,o,N as n}from"./chunks/framework.8361052b.js";const a="/CSS/assets/scroll.071db280.png",u=JSON.parse('{"title":"用户体验","description":"","frontmatter":{},"headers":[],"relativePath":"css视觉效果/用户体验.md"}'),e={name:"css视觉效果/用户体验.md"},c=n(`<h1 id="用户体验" tabindex="-1">用户体验 <a class="header-anchor" href="#用户体验" aria-label="Permalink to &quot;用户体验&quot;">​</a></h1><h2 id="鼠标样式" tabindex="-1">鼠标样式 <a class="header-anchor" href="#鼠标样式" aria-label="Permalink to &quot;鼠标样式&quot;">​</a></h2><blockquote><p>常规的cursor属性</p></blockquote><ol><li><code>cursor:auto</code>:默认值.表示光标形状根据内容类别浏览器自动进行处理</li><li><code>cursor:default</code>.系统默认光标形状,不是默认值</li><li><code>cursor:none</code>.让光标元素隐藏不见,一般是全屏视频的时候,不希望光标出现</li></ol><blockquote><p>链接和状态</p></blockquote><ol><li><code>cursor:pointer</code>.一只伸出食指的手</li><li><code>cursor:help</code>.帮助,用于帮助链接或者包含信息的?图标上</li><li><code>cursor:progress</code>.加载中.更适合loading处理,比如收发一个信息的时候.</li><li><code>cursor:wait</code>.加载中的圈圈.</li></ol><blockquote><p>选择</p></blockquote><ol><li><code>cursor:text</code>.这样的标志:<code>I</code>.表示文本可以被选中</li><li><code>cursor:vertial-text</code>.标志:倒过来的<code>I</code>表示文字可以被垂直选中</li><li><code>cursor:crosshair</code>:十字光标,用于像素级的框选或者点选场合</li><li><code>cursor:cell</code>.和<code>distable:table-cell</code>是同一个东西.表示单元格是可以框选的</li></ol><blockquote><p>拖拽</p></blockquote><ol><li><code>cursor:move</code>.光标变成<code>cursor:move</code>往往就意味着当前元素是可以移动的</li><li><code>cursor:copy</code>:光标变成cursor:copy,往往就意味着当前元素是可以被复制的</li><li><code>cursor:alias</code>:光标变成cursor:alias,往往就意味着当前元素是可以创建别名或者快捷方式的</li><li><code>cursor:no-drop</code>:光标变成cursor:no-drop,往往就意味着当前元素放开到当前位置是不允许的</li><li><code>cursor:not-allowed</code>:光标变成<code>cursor:not-allowed</code>,往往就意味着当前行为是禁止的</li></ol><blockquote><p>拉伸</p></blockquote><ul><li><p><code>cursor:col-resize</code>:它适用于移动垂直线条,如垂直参考线如果要通过移动改变左右分栏的宽度,建议使用<code>cursor:ew-resize</code></p></li><li><p><code>cursor:row-resize</code>:光标形状类似.它适用于移动水平线条,如水平参考线.如果要通过移动改变上下分栏的高度,建议使使用<code>cursor:ns-resize</code></p></li><li><p>单向拉伸:总共 8 个方位 8 个不同的关键字属性值</p><ul><li><code>cursor:n-resize</code>.理应是一个朝上的单箭头</li><li><code>cursor:e-resize</code>.理应是一个朝右的单箭头</li><li><code>cursor:s-resize</code>.理应是一个朝下的单箭头</li><li><code>cursor:w-resize</code>.理应是一个朝左的单箭头</li><li><code>cursor:ne-resize</code>.理应是一个朝右上角的单箭头</li><li><code>cursor:nw-resize</code>.理应是一个朝左上角的单箭头</li><li><code>cursor:se-resize</code>.理应是一个朝右下角的单箭头</li><li><code>cursor:sw-resize</code>.理应是一个朝左下角的单箭头</li></ul></li><li><p>双向拉伸:总共 4 个对立方位组合.名称和近似形状如下.</p><ul><li>cursor:ew-resize</li><li>cursor:ns-resize</li><li>cursor:nesw-resize</li><li>cursor:nwse-resize</li></ul></li></ul><blockquote><p>缩放</p></blockquote><ul><li><code>cursor:zoom-in</code>:光标形似放大镜</li><li><code>cursor:zoom-out</code>:光标形似缩小镜</li></ul><blockquote><p>抓取</p></blockquote><ul><li><code>cursor:grab</code>:光标是一个五指张开的手</li><li><code>cursor:grabbing</code>:光标是一个五指收起的手</li></ul><blockquote><p>自定义光标</p></blockquote><ul><li>对于Chrome等浏览器,可以直接使用PNG图片作为光标</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">cur-none</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">cursor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">url</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">transparent.png</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h2 id="点击行为" tabindex="-1">点击行为 <a class="header-anchor" href="#点击行为" aria-label="Permalink to &quot;点击行为&quot;">​</a></h2><h3 id="pointer-events" tabindex="-1">pointer-events <a class="header-anchor" href="#pointer-events" aria-label="Permalink to &quot;pointer-events&quot;">​</a></h3><blockquote><p>pointer-events属性施一公非常实用的css新特性</p></blockquote><ul><li><code>pointer-events:none</code>的介绍 <ol><li>设置none并不能阻止键盘行为,按钮元素依然可以通过Tab键被focus聚焦,并且可以在focus聚焦状态下通过Enter间触发点击事件,也即是说设置<code>pointer-events:none</code>实现的是部分禁用</li><li>设置none会影响无障碍访问,如果设置按钮在被禁用的时候,可以通过title属性或者其他提示的组件在鼠标指针悬停显示禁用的原因,如果设置了<code>pointer-events:none</code>,则无法显示</li></ol></li><li>继承性:通过祖先元素设置了<code>pointer-events</code>,那么子元素也会有相同的效果.不过子元素同样也可以覆盖祖先元素pointer-events的属性值</li></ul><h4 id="其他属性" tabindex="-1">其他属性 <a class="header-anchor" href="#其他属性" aria-label="Permalink to &quot;其他属性&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pointer-events</span><span style="color:#A6ACCD;">: auto </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> none </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> visiblePainted </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> visibleFill </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> visibleStroke </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> visible </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> painted </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> fill </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> stroke </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> all;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>visiblePainted</code>:SVG元素响应鼠标事件首先需要visibility的计算值是visible,同时鼠标指针移动到填充区域的时候fill不是none,移动到描边区域的时候stroke不是none(肉眼可见的有描边或有填充的地方都可以响应鼠标事件)</li><li><code>visibleFill</code>:SVG元素响应鼠标事件首先需要visibility的计算值是visible,同时鼠标指针经过的区域需要是填充区域,无论有没有填充颜色或图案都可以响应,但是同时会忽略描边区域(鼠标指针经过SVG元素的描边区域不会有任何鼠标响应事件发生)</li><li><code>visibleStroke</code>:和visibleFill关键字属性值的区别就是描边和填充的地位调换.对于属性值visibleStroke,鼠标指针经过描边区域可以影响鼠标事件,但是经过填充区域不会有任何响应</li><li><code>visible</code>:SVG元素只需要visibility的计算值是visible就能影响点击事件,不管fill属性值是不是none,也不管stroke属性值是不是none.(只要元素显示,任意描边或填充区域都可以响应鼠标事件)</li><li><code>painted</code>:和visiblePainted关键字属性值的区别在于,对于painted属性值,就算元素的visibility计算值是hidden,也是可以影响鼠标事件的,例如点击或者悬停效果等</li><li><code>fill</code>:类似的,fill关键字并不需要SVG元素的visibility计算值是visible,就算visibility计算值是hidden,鼠标一样可以点击填充区域</li><li><code>stroke</code>:SVG元素的visibility计算值就算是hidden,描边区域也能响应鼠标事件,填充区域则不能响应鼠标事件</li><li><code>all</code>:和painted关键字的区别在于,painted关键字需要fill或者stroke的属性值不是none,而all关键字没有这个限制</li></ul><h2 id="滚动行为" tabindex="-1">滚动行为 <a class="header-anchor" href="#滚动行为" aria-label="Permalink to &quot;滚动行为&quot;">​</a></h2><h3 id="scroll-behavior" tabindex="-1">scroll-behavior <a class="header-anchor" href="#scroll-behavior" aria-label="Permalink to &quot;scroll-behavior&quot;">​</a></h3><blockquote><p>scroll-behavior是一个交互效果渐进增强的css属性</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">scroll-behavior</span><span style="color:#A6ACCD;">: auto;</span></span>
<span class="line"><span style="color:#FFCB6B;">scroll-behavior</span><span style="color:#A6ACCD;">: smooth;</span></span>
<span class="line"></span></code></pre></div><ul><li><p>其中auto是初始值,不常用,一般是在滚动容器元素上使用<code>scroll-behavior:smooth</code>,让元素的滚动变得平滑</p></li><li><p>如果想要在切换的时候要有平滑的动画效果很简单,只要在容器元素的css代码中新增一句<code>scroll-behavior:smooth</code></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">scroll-behavior</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">smooth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><blockquote><p>更好的做法是:<span style="color:red;">凡是需要滚动的地方都加一句<code>scroll-behavior:smooth</code></span></p></blockquote><ul><li>例如桌面端中的网页默认滚动代码在&lt;html&gt;标签上,移动端中的网页默认滚动代码大多数在&lt;body&gt;标签上 <ul><li>此时经常使用的锚点定位功能就有平滑定位功能,而不是瞬间跳转的效果</li></ul></li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">html</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">body</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">scroll-behavior</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> smooth</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>使用<code>Element.scrollIntoView()</code></p></blockquote><ul><li>Element 接口的<code>scrollIntoView()</code>方法会滚动元素的父容器,使被调用<code>scrollIntoView()</code>的元素对用户可见</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollIntoView</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 等同于 element.scrollIntoView(true)</span></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollIntoView</span><span style="color:#A6ACCD;">(alignToTop</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">); </span><span style="color:#676E95;font-style:italic;">// Boolean 型参数</span></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scrollIntoView</span><span style="color:#A6ACCD;">(scrollIntoViewOptions</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">); </span><span style="color:#676E95;font-style:italic;">// Object 型参数</span></span>
<span class="line"></span></code></pre></div><ul><li><code>alignToTop</code>?:布尔值 <ul><li><code>true</code>:元素的顶端将和其所在滚动区的可视区域的顶端对齐.默认为<code>scrollIntoViewOptions: {block: &quot;start&quot;, inline: &quot;nearest&quot;}</code></li><li><code>false</code>:元素的底端将和其所在滚动区的可视区域的底端对齐.默认为:<code>scrollIntoViewOptions: {block: &quot;end&quot;, inline: &quot;nearest&quot;}</code></li></ul></li><li><code>scrollIntoViewOptions</code>?:一个包含下列属性的对象 <ul><li><code>behavior</code>?:定义动画过渡效果,<code>auto</code>或<code>smooth</code>之一.默认为<code>auto</code></li><li><code>block</code>?:定义垂直方向的对齐,<code>start</code>,<code>center</code>,<code>end</code>,<code>nearest</code>之一.默认为<code>start</code></li><li><code>inline</code>?:定义水平方向的对齐,<code>start</code>,<code>center</code>,<code>end</code>或<code>nearest</code>之一.默认为<code>nearest</code></li></ul></li></ul><h3 id="overscroll-behavior" tabindex="-1">overscroll-behavior <a class="header-anchor" href="#overscroll-behavior" aria-label="Permalink to &quot;overscroll-behavior&quot;">​</a></h3><blockquote><p>使用overscroll-behavior属性可以实现当滚动嵌套时终止滚动</p></blockquote><ul><li>默认情况下,局部滚动的滚动条滚动到底部边缘在继续滚动的时候,外部容器滚动条会继续跟着滚动 <ul><li>但是,有时候我们希望局部滚动条滚到底部之后,滚动行为就停止.</li><li>例如下拉列表中的滚动条滚动到底部的时候,如果外部容器的滚动条还继续滚动</li></ul></li></ul><ol><li><code>overscroll-behavior</code>属性可以设置DOM元素滚动到边缘的行为 <ul><li>语法:<code>overscroll-behavior: [ contain | none | auto ]{1,2}</code></li><li>它支持1~2个值,分别表示x方向和y方向 <ul><li><code>auto</code>:<strong>默认值</strong>,表现为默认看到的滚动行为,即滚动条滚动到边缘后继续滚动到外部的可滚动容器</li><li><code>contain</code>:默认的滚动溢出只会表现在当前元素的内部,不会队响铃的滚动区域进行滚动</li><li><code>none</code>:响铃的滚动区域不会发生滚动,并且会阻止默认的滚动溢出行为</li></ul></li></ul></li><li>其他相关的语法 <ul><li>overscroll-behavior和overflow类型,也支持分解为<code>overscroll-behavior-x</code>和<code>overscroll-behavior-y</code>,分别表示水平滚动和垂直滚动的边界行为</li></ul></li></ol><h3 id="overflow-anchor" tabindex="-1">overflow-anchor <a class="header-anchor" href="#overflow-anchor" aria-label="Permalink to &quot;overflow-anchor&quot;">​</a></h3><blockquote><p>了解滚动锚定</p></blockquote><ul><li><p>当视口上面的内容突然出现的时候,浏览器会自动改变滚动高度,让视口区域内容固定,就像滚动效果被锚定一样</p></li><li><p>有时候滚动锚定不是正确的选择:例如用户使用按钮加载一些数据的时候,这时候使用滚动锚定就会让视口跟着按钮走,而不是视口加载的数据推开按钮</p></li><li><p>语法:<code>overflow-anchor: auto | none</code></p><ul><li><code>overflow-anchor:auto</code>是<strong>初始声明</strong>,表示浏览器自己决定滚动的锚定行为,通常是执行滚动锚定</li><li><code>overflow-anchor:none</code>表示禁止锚定的行为</li></ul></li></ul><h3 id="css-scroll-snap" tabindex="-1">CSS Scroll Snap <a class="header-anchor" href="#css-scroll-snap" aria-label="Permalink to &quot;CSS Scroll Snap&quot;">​</a></h3><blockquote><p>CSS SCroll Snap可以让网页容器滚动停止的时候,自动平滑定位到指定元素的指定位置,包含以<code>scroll-</code>和<code>scroll-snap-</code>开头的诸多css属性</p></blockquote><ul><li>大概的样式就是你水平滚动页面上的土拍你区域就会发现,当滚动行为停止的时候,图片就会自动调整位置,使自己滚动视口的居中位置显示 <ul><li>容器使用<code>scroll-snap-type</code>属性,子元素使用<code>scroll-snap-align</code>属性,可以让页面滚动提留在你希望用户关注的重点区域</li><li>在IOS中,safari浏览器中需要同时设置<code>-webkit-overflow-scrolling:touch</code>才有效</li></ul></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">scroll-x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">414px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">420px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">scroll-snap-type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> x mandatory</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">white-space</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> nowrap</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">scroll-x</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">img</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">scroll-snap-align</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scroll-x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>作用在滚动容器上</th><th>作用在滚动定位子元素上</th></tr></thead><tbody><tr><td>scroll-snap-type</td><td>scroll-snap-align</td></tr><tr><td>scroll-snap-stop</td><td>scroll-margin</td></tr><tr><td>scroll-padding</td><td>scroll-margin-top</td></tr><tr><td>scroll-padding-top</td><td>scroll-margin-right</td></tr><tr><td>scroll-padding-right</td><td>scroll-margin-bottom</td></tr><tr><td>scroll-padding-bottom</td><td>scroll-margin-left</td></tr><tr><td>scroll-padding-left</td><td>scroll-margin-inline</td></tr><tr><td>scroll-padding-inline</td><td>scroll-margin-inline-start</td></tr><tr><td>scroll-padding-inline-start</td><td>scroll-margin-inline-end</td></tr><tr><td>scroll-padding-inline-end</td><td>scroll-margin-block</td></tr><tr><td>scroll-padding-block</td><td>scroll-margin-block-start</td></tr><tr><td>scroll-padding-block-start</td><td>scroll-margin-block-end</td></tr><tr><td>scroll-padding-block-end</td><td></td></tr></tbody></table><ul><li>合并一下这些css属性 <ol><li>作用在滚动容器上:<code>scroll-snap-type</code>,<code>scroll-snap-stop</code>,<code>scroll-padding/scroll-padding-*</code></li><li>作用在滚动子元素上:<code>scroll-snap-align</code>,<code>scroll-margin/scroll-margin-*</code></li></ol></li><li>作用在容器上的<code>scroll-padding</code>相关属性和作用在子元素上的<code>scroll-margin</code>相关属性都是用来调整定位点的位置的,于定位效果没有必然关系,且语法上与padding和margin属性一致</li></ul><blockquote><p><a href="https://demo.cssworld.cn/new/13/1-5.php" target="_blank" rel="noreferrer">scroll-snap-type</a>属性用于确定定位方式是水平滚动定位还是垂直滚动定位</p></blockquote><ul><li><p><code>none</code>:<strong>默认值</strong>.表示滚动时忽略捕捉点,就是平时使用的滚动定位</p></li><li><p><code>x</code>:捕捉水平定位点</p></li><li><p><code>y</code>:捕捉垂直定位点</p></li><li><p><code>block</code>:捕捉和块状元素排列一个滚动方向的定位点,默认文档流下指的是垂直轴</p></li><li><p><code>inline</code>:捕捉和内联元素排列一个滚动方向的定位点,默认文档流下指的是水平轴</p></li><li><p><code>both</code>:横轴,纵轴都捕捉</p></li><li><p><code>mandatory</code>:<strong>表示强制,为可选参数</strong>.强制定位,也就是如果存在有效的定位位置,则滚动容器必须在滚动结束时进行定位</p></li><li><p><code>proximity</code>:<strong>表示大约,为可选参数</strong>.白女士可能会定位,让浏览器自己选择</p></li><li><p>mandatory和proximity效果类似,只有当滚动容器的窗口尺寸比子元素的尺寸还要小的时候,才会有差异</p><ul><li>为了让滚动容器在尺寸不足的时候,不会出现部分区域或者部分元素永远不可见的情况</li><li>例如使用mandatory定位的图片靠近上下便源的区域时永远看不到的</li><li>但是使用<code>proximity</code>的图片不是这样的</li></ul></li><li><p><span>在绝大多数情况下,可以直接使用<code>mandatory</code>进行强制定位</span>.如果容器尺寸较小,有部分重要内容必须要显示,则使用<code>proximity</code>强制定位</p></li></ul><blockquote><p>scroll-snap-stop</p></blockquote><ul><li><p>scroll-snap-stop属性表示是否允许滚动容器忽略捕获位置</p><ol><li><code>normal</code>:默认值,可以忽略捕获位置</li><li><code>always</code>:不能忽略捕获位置,且定位到第一个捕获元素的位置</li></ol></li><li><p>该属性可以保证我们每次只滚动一屏或者一个指定元素,而不会一下子滚动多屏或者多个元素</p></li></ul><blockquote><p>scroll-snap-align</p></blockquote><ul><li><p>该属性作用在滚动容器的子元素上,表示捕获点是上边缘,下边缘或者中间位置</p><ol><li><code>none</code>:<strong>默认值</strong>.不定义位置</li><li><code>start</code>:起始位置对齐,如垂直滚动,子元素和容器同上边缘对齐</li><li><code>end</code>:结束位置对齐,如垂直滚动,子元素和容器同上边缘对齐</li><li><code>center</code>:居中对齐,子元素中心和滚动容器中心一致</li></ol></li><li><p><code>scroll-snap-align</code>:支持同时使用两个属性值</p></li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">scroll-snap-stop</span><span style="color:#A6ACCD;">: start end;</span></span>
<span class="line"></span></code></pre></div><ul><li>虽然CSS Scroll Snap包括的css属性很多,但是在实际开发中只需要编写下面这样的css</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">scroll-snap-type</span><span style="color:#A6ACCD;">: x/y;</span></span>
<span class="line"><span style="color:#FFCB6B;">scroll-snap-align</span><span style="color:#A6ACCD;">: start/end/center;</span></span>
<span class="line"></span></code></pre></div><h3 id="滚动条样式" tabindex="-1">滚动条样式 <a class="header-anchor" href="#滚动条样式" aria-label="Permalink to &quot;滚动条样式&quot;">​</a></h3><blockquote><p>用于修改滚动条的css样式</p></blockquote><ol><li><code>scrollbar-width</code>:该属性用来设置滚动条的宽度,仅支持关键字属性值,并不支持长度值 <ul><li>语法<code>scrollbar-width: auto | thin | none;</code></li><li><code>auto</code>:采用系统默认的滚动条样式</li><li><code>thin</code>:如果系统有窄的滚动条选项就使用这个窄的滚动条,如果没有就使用比滚动条宽度窄一点的宽度</li><li><code>none</code>:滚动条不显示,但是页面还是可以正常滚动</li></ul></li><li><code>scrollbar-color</code>:用来设置滚动条的颜色 <ul><li>语法:<code>scrollbar-color: auto | dark | light | &lt;color&gt;{2}</code></li><li><code>auto</code>:采用系统默认的滚动条颜色,具体的颜色有操作系统使用的主题决定</li><li><code>dark</code>:深色滚动条,可以是系统提供的滚动条的深色变体,也可以使带有深色的自定义滚动条</li><li><code>light</code>:浅色滚动条.可以是系统提供的滚动条的浅色变体,也可以使带有钱色的自定义滚动条</li><li><code>&lt;color&gt;</code>:专门指定滚动条的颜色,第一个颜色值表示点击滑块的颜色,对应webkit内核浏览器私有的<code>::-webkit-scrollbar-thumb</code>伪元素,第二个颜色是滚动滚到的颜色,对应webkit内核浏览器私有的<code>::-webkit-scrollbar-track</code>伪元素</li></ul></li></ol><ul><li>目前只需要关心<code>scrollbar-color:&lt;color&gt; &lt;color&gt;</code></li></ul><blockquote><p>更改滚动条的伪元素样式</p></blockquote><p><img src="`+a+`" alt=" "></p><ul><li><p><code>::-webkit-scrollbar</code>:指滚动条整体部分,它的属性有<code>width</code>,<code>height</code>,<code>background</code>等</p></li><li><p><code>::-webkit-scrollbar-button</code>: 指滚动条两边的按钮.当不需要时可以用<code>display:none</code>将其隐藏</p></li><li><p><code>::-webkit-scrollbar-track</code>:指外层轨道部分,当不需要时可以用<code>display:none</code>将其隐藏,也可以添加你想要的颜色</p></li><li><p><code>::-webkit-scrollbar-track-piece</code>:指内层轨道部分,即滚动条中间的部分</p></li><li><p><code>::-webkit-scrollbar-thumb</code>:指滚动条里面可以拖动的部分,也就是滑块</p></li><li><p><code>::-webkit-scrollbar-corner</code>:指边角部分</p></li><li><p><code>::-webkit-resizer</code>:他用来定义右下角滑块的样式</p></li><li><p>任何对象都可以设置:<strong>边框</strong>、<strong>阴影</strong>、<strong>背景图片</strong>等等,创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为.下面的伪类可以应用到上面的伪元素中</p><ul><li><code>:horizontal</code>适用于任何水平方向上的滚动条</li><li><code>:vertical</code>:适用于任何垂直方向的滚动条</li><li><code>:decrement</code>:适用于按钮和轨道碎片.表示递减的按钮或轨道碎片,例如可以使区域向上或者向右移动的区域和按钮</li><li><code>:increment</code>:适用于按钮和轨道碎片.表示递增的按钮或轨道碎片,例如可以使区域向下或者向左移动的区域和按钮</li><li><code>:start</code>:适用于按钮和轨道碎片.表示对象(按钮轨道碎片)是否放在滑块的前面</li><li><code>:end</code>:适用于按钮和轨道碎片.表示对象(按钮轨道碎片)是否放在滑块的后面</li><li><code>:double-button</code>:适用于按钮和轨道碎片.判断轨道结束的位置是否是一对按钮.也就是轨道碎片紧挨着一对在一起的按钮.</li><li><code>:single-button</code>:适用于按钮和轨道碎片.判断轨道结束的位置是否是一个按钮.也就是轨道碎片紧挨着一个单独的按钮.</li><li><code>:no-button</code>:表示轨道结束的位置没有按钮.</li><li><code>:corner-present</code>:表示滚动条的角落是否存在.</li><li><code>:window-inactive</code>:适用于所有滚动条,表示包含滚动条的区域,焦点不在该窗口的时候.</li></ul></li></ul><h2 id="拉伸行为" tabindex="-1">拉伸行为 <a class="header-anchor" href="#拉伸行为" aria-label="Permalink to &quot;拉伸行为&quot;">​</a></h2><blockquote><p>拉伸行为的背后是resize属性的作用</p></blockquote><ul><li>语法:<code>resize:none | both | horizontal | vertial | block | inline</code><ul><li><code>none</code>:初始值,表示没有拉伸效果,常用来重置&lt;textarea&gt;元 素内置的拉伸行为</li><li><code>both</code>:既可以水平方向拉伸,也可以垂直方向拉伸</li><li><code>horizontal</code>:仅可以水平方向拉伸,此时鼠标的指针也会变成水平方向的拉伸样式</li><li><code>vertical</code>:仅可以垂直方向拉伸,此时鼠标的指针也会变成垂直方向的拉伸样式</li><li><code>block</code>:后期新增的属性值,目前现代浏览器都提供支持.其表示沿着块级元素的排列方向拉伸,默认是垂直方向,也可能是水平方向,这取决于writing-mode的值</li></ul></li></ul><ol><li>resize作用的条件 <ul><li>不支持内联元素</li><li>如果是块级元素,需要使用overflow属性的计算值不是visible</li></ul></li><li>resize生效的原理 <ul><li>设置了resize属性的元素通过拉伸改变元素的尺寸是通过设置元素的width属性值和height属性值实现的</li></ul></li></ol><ul><li>如果希望元素的拉伸的尺寸不是无限的,可以通过设置<code>min-widht</code>,<code>min-height</code>,<code>max-widht</code>和<code>max-height</code>属性进行限制</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">min-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">600px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">resize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> both</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>resize属性拖拽条的样式可以使用<code>::-webkit-resizer</code>伪元素进行自定义</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">-webkit-scrollbar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">background-image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">url</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resize.png</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="输入行为" tabindex="-1">输入行为 <a class="header-anchor" href="#输入行为" aria-label="Permalink to &quot;输入行为&quot;">​</a></h2><blockquote><p>caret-color属性可以改变输入框插入光标的颜色,同时又不改变输入框里内容的颜色</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">input</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">333</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">caret-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>只有光标颜色变成红色,文字颜色变成黑色</li></ul><h2 id="选择行为" tabindex="-1">选择行为 <a class="header-anchor" href="#选择行为" aria-label="Permalink to &quot;选择行为&quot;">​</a></h2><blockquote><p><code>user-select</code>:通常设置<code>user-select:none</code>禁止图文被选中</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">-webkit-user-select</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">user-select</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><p>语法:<code>user-select: auto | text | none | contain | all</code></p><ul><li><code>cntain</code>表示被选中,无任何浏览器支持</li><li><code>all</code>表示元素的内容需要整体选择,而不是所有类型的内容都可以选择</li></ul></li><li><p>无论将user-select属性值设为什么,::before和::after伪元素生成的内容都表现为none,也就是生成的内容永远无法被选中</p><ul><li>如果将父元素的user-select属性值设置为all,则当前元素的user-select属性值表现也是all</li><li>如果将父元素的user-select属性值设置为none,则当前元素的user-select属性值表现也是none</li></ul></li></ul><blockquote><p>使用<code>::selection</code>改变文字被选中后的颜色</p></blockquote><ul><li>使用::selection伪元素可以改变文字被选中后的颜色和背景色</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">maroon</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">selection</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> maroon</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">fff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">maroon</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">圣体健康,给大佬们请安</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><ul><li>使用<code>::selection</code>伪元素不仅可以改变被选中文字的颜色和背景色,理论上还能改变文字阴影颜色、下划线颜色和轮廓颜色等 <ul><li>color</li><li>background-color</li><li>cursor</li><li>caret-color</li><li>outline和非缩写CSS属性</li><li>text-decoration和相关CSS属性</li><li>text-emphasis-color</li><li>text-shadow</li><li>stroke-color、fill-color和stroke-width属性</li></ul></li><li>并且<code>::selection</code>伪元素不仅可以改变被选中的文字样式,被选中的图像样式同样可以修改</li></ul><h2 id="性能增强" tabindex="-1">性能增强 <a class="header-anchor" href="#性能增强" aria-label="Permalink to &quot;性能增强&quot;">​</a></h2><blockquote><p><code>will-change</code>:增强页面渲染性能.现代浏览器3D变换会启用GPU加速</p></blockquote><ul><li>当我们点击等触发大面积绘制的时候,浏览器往往是没有准备的被动使用GPU计算于重绘,而设置<code>will-change</code>会提前告知GPU这种行为</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 语法 */</span></span>
<span class="line"><span style="color:#FFCB6B;">will-change</span><span style="color:#A6ACCD;">: auto; </span></span>
<span class="line"><span style="color:#FFCB6B;">will-change</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">scroll-position</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> contents </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> &lt;</span><span style="color:#FFCB6B;">custom-ident</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li>如果发现滚动动画卡顿,则可以试试<code>scroll-position</code>.如果是内容变化,则可以试试contents.如果是其他CSS属性动画性能不佳,掉帧明显,则可以试试&lt;custom-ident&gt;类型的属性值</li><li>&lt;custom&gt;类型只能是css自带的属性,不能是自定义的</li><li>transform和opacity动画性能是最好的</li><li>不过很少使用<code>will-change</code>去提高动画性能,通常用于创建层叠上下文.例如元素设置<code>will-change:transform</code>会有和transform属性一样的行为 <ol><li>创建层叠上下文,影响元素的层级</li><li>会影响混合模式的计算</li><li>设置overflow:hidden会隐藏内部溢出的绝对定位元素</li></ol></li></ul><h3 id="contain属性" tabindex="-1">contain属性 <a class="header-anchor" href="#contain属性" aria-label="Permalink to &quot;contain属性&quot;">​</a></h3><ul><li>contain属性可以让局部的DOM树成为一个独立的部分,和页面其他的DOM树完全隔离,这样在这部分内容发生变化的时候,重绘于重计算只会在这个局部DOM树结构内部发生</li></ul><h4 id="理解四种限制类型" tabindex="-1">理解四种限制类型 <a class="header-anchor" href="#理解四种限制类型" aria-label="Permalink to &quot;理解四种限制类型&quot;">​</a></h4><ul><li>Size Containment</li><li>Layout Containment</li><li>Style Containment</li><li>Paint Containment</li></ul><blockquote><p>Size Containment:这里只的是内部元素的变化不会影响当前元素尺寸的变化,而不是<code>max-height/min-width</code>这种尺寸变化</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li>这张图片就有一个尺寸,这个尺寸在默认状态下是1.jpg这张图片的原始尺寸.如果我们将1.jpg修改为另外一个不同尺寸的2.jpg,则&lt;img&gt;元素的尺寸就会跟着变化</li><li>具体实现的<strong>尺寸限制</strong><ol><li>让浏览器直接无视元素里面的内容就可以了,也就是假设元素里面的元素不存在;如果是替换元素,就认为替换内容不存在</li><li>尺寸限制状态下的元素的尺寸都是0*0,如果没有设置边框等,元素默认不可见</li><li>实际开发中,应用<code>Size Containment</code>元素一定是需要设置具体的width和height</li></ol></li><li>不是所有的元素都支持Size Containment,不支持的元素包括<code>display:contents</code>和<code>display:none</code>的元素</li><li>使用场景:使用js根据包含快元素的尺寸设置内部元素尺寸,可以有效的避免某种循环 <ul><li>inline-block水平的元素的尺寸是根据元素里面的内容决定的,现在希望元素里面内容的尺寸永远比inline-block的尺寸小1px.</li><li>按照字面上的需求,我们可以先使JavaScript获取inline-block水平的尺寸,再去修改元素里面子元素的尺寸.但是,这种做法会带来一个问题,那就是inline-block的尺寸是根据元素里面子元素的尺寸变化的,如果子元素尺寸变小了,岂不是inline-block元素的尺寸也要变小,这又会导致子元素尺寸再次变小</li></ul></li></ul><blockquote><p>Layout Containment:可以想象元素的骨架,框架或者渲染盒子进行封闭,形成的结界</p></blockquote><ul><li>会形成一个全新的包含块,无论是绝对定位元素还是固定定位元素的left和top偏移都会相对这个包含块计算</li><li>会创建一个新的层叠上下文,除了可以改变元素重叠时的层级表现,还可以限制混合模式等</li><li>创建一个新的格式化上下文</li></ul><blockquote><p>Style Containment:指css计数器和其他相关内容的生成的限制</p></blockquote><ul><li>CSS计数器属性<code>counter-increment</code>和<code>counter-set</code>是受到整个DOM树中的计数器影响的 <ul><li>例如:父元素执行依次counter-increment,子元素又执行一次counter-increment.最终的计数值时父子元素累加值</li><li>如果设置Style Containment.则计数的范围就会被限定在元素的子树上</li></ul></li><li>Style Containment除了限制计数器的作用范围,对其他content内容生成特性同样适用,包括open-quote、close-quote、no-open-quote和no-close-quote</li></ul><blockquote><p>Paint Containment:与Layout Containment很相似.都会成为绝对定位和固定定位元素的包含快,会创建性的层叠上下文</p></blockquote><ul><li>不同之处就是Layout Containment不会渲染任何包含框之外的内容,那排overflow属性值时visible.</li><li>并且Layout Containment依然会保留溢出内容对布局的影响.(如改变基线对齐)</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> inline-block</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">150px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">36px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> skyblue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">基线对齐</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">不同之处就是Layout Containment不会渲染任何包含框之外的内容,那排overflow属性值时visible. </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h4 id="contain属性值语法" tabindex="-1">contain属性值语法 <a class="header-anchor" href="#contain属性值语法" aria-label="Permalink to &quot;contain属性值语法&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ontain: none; contain: strict; contain: content;</span></span>
<span class="line"><span style="color:#A6ACCD;">contain: </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">layout</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">style</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">paint</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><ul><li><p>Size Containment限制类型对应属性值size,不妨就称为size类型</p></li><li><p>Layout Containment限制类型对应属性值layout,不妨就称为layout类型</p></li><li><p>Style Containment限制类型对应属性值style,不妨就称为style类型</p></li><li><p>Paint Containment限制类型对应属性值paint,不妨就称为paint类型</p></li><li><p>strict表示对除style类型以外的类型都进行限制.此属性值等同于<code>contain: size layout paint</code>的设置</p></li><li><p>content表示对除size和style类型以外的类型都进行限制.此属性值等同于<code>contain: layout paint</code>,表现为元素内容渲染,元素外内容不渲染</p></li></ul><h4 id="content-visibility" tabindex="-1">content-visibility <a class="header-anchor" href="#content-visibility" aria-label="Permalink to &quot;content-visibility&quot;">​</a></h4><ul><li><p><code>content-visibility</code>属性表示可以让浏览器决定是否渲染视区以为的内沟通,来提高也面的渲染性能</p></li><li><p>当浏览器决定不渲染某个元素里面的内容的时候,元素会开启<code>Layout Containment</code>、<code>Style Containment</code>和<code>Paint Containment</code>,如果元素没有设置具体的高,宽值,则尺寸可能是0</p></li><li><p>随着浏览器页面的滚动,元素进入视区后会再次渲染,此时就会出现内容跳动的情况,这种体验反而糟糕</p></li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">article</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  content-visibility</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  contain-intrinsic-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><code>contain-intrinsic-size</code>可以理解为内容的占位尺寸</li><li>并且content-visibility并不成熟</li></ul>`,113),p=[c];function t(i,r,d,y,D,C){return o(),s("div",null,p)}const A=l(e,[["render",t]]);export{u as __pageData,A as default};

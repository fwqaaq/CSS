import{_ as l,c as o,o as n,N as s,x as a}from"./chunks/framework.8361052b.js";const e="/CSS/assets/materix.a0987cbc.png",t="/CSS/assets/3D-x-y.cc11d813.png",p="/CSS/assets/rotate3D.d5ceda1d.png",c="/CSS/assets/perspective.c932e5c1.png",r="/CSS/assets/translateX.750c91c8.png",i="/CSS/assets/perspective-origin.f8f9f72c.png",S=JSON.parse('{"title":"css动画","description":"","frontmatter":{},"headers":[],"relativePath":"css动画/CSS动画transform.md"}'),d={name:"css动画/CSS动画transform.md"},D=s(`<h1 id="css动画" tabindex="-1">css动画 <a class="header-anchor" href="#css动画" aria-label="Permalink to &quot;css动画&quot;">​</a></h1><h2 id="transform" tabindex="-1">transform <a class="header-anchor" href="#transform" aria-label="Permalink to &quot;transform&quot;">​</a></h2><blockquote><p>2D和3D属性均支持</p></blockquote><ol><li>盒模型尺寸不会变化:页面中的元素无论使用什么transform属性值.该元素盒模型的尺寸盒位置都不会有任何变化 <ul><li>例如&lt;img&gt;的尺寸是150px * 100px,无论运用什么属性,他的尺寸都不会变</li><li>就算使用<code>transform:scale(2)</code>视觉上尺寸放大了两倍,也不会推开旁边的元素</li></ul></li><li>内联元素无效:所有的内联元素都是无法使用transform变换的</li><li>同时使用多个转换,其格式为<code>transform:tranlate() rotate() scale()...</code><ul><li>顺序会影响旋转效果(先旋转会改变坐标轴方向)</li></ul></li></ol><blockquote><p>元素使用transform属性后的变化</p></blockquote><ol><li><p>创建层叠上下文:和opacity属性值不是1的元素类似,如果元素的transform属性值不是none,则会创建一个新的层叠上下文</p><ul><li>覆盖其它元素</li><li>限制<code>z-index:-1</code>的层级表现</li></ul></li><li><p>固定定位失效</p><ul><li>如果父级设置<code>transform</code>变换,而子级设置<code>position:fixed</code>固定定位就会失效</li><li>可以使用外层元素实现固定定位,然后内层元素实现动画</li></ul></li><li><p>改变overflow对绝对定位元素的限制(<span style="color:red;">溢出隐藏</span>)</p><ul><li>position属性值不为static的值可以影响绝对定位在overflow的表现</li><li>transform属性值不为none的元素可以影响<strong>绝对定位</strong>在overflow元素中的表现</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">border</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> solid deepskyblue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">150px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">150px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">img</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">transform</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scale</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./css样式/形状/img/0.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transform</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./css样式/形状/img/0.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div></li><li><p>改变绝对定位元素的包含块:绝对元素的包含块可以为transform属性值不为none的元素.不一定非要position不为static的第一个祖先元素</p></li></ol><h2 id="css2d转换" tabindex="-1">css2D转换 <a class="header-anchor" href="#css2d转换" aria-label="Permalink to &quot;css2D转换&quot;">​</a></h2><blockquote><p>2D转换常用的方法包括位移(translate),旋转(rotate),缩放(scale)和斜切(skew)</p></blockquote><h3 id="translate" tabindex="-1">translate <a class="header-anchor" href="#translate" aria-label="Permalink to &quot;translate&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">class</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">translate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">/* 或者分开写 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">translateX</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">translateY</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>沿着x,y轴运动.translate不会影响到其它的元素 <ul><li>例如<code>transform:translate(10px,20px)</code>向右偏移10px,向下偏移20px</li></ul></li><li>translate的百分比是相对于自身元素的 <ul><li>例如<code>translate(-50%,-50%)</code>向上偏移自身高度的一半,向左偏移自身宽度的一半</li></ul></li><li>对行内标签无效</li></ul><blockquote><p>可以用来实现高度不固定的元素的水平垂直居中效果</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">class</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">left</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">/* 父容器宽度的一半 */</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#B2CCD6;">top</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">/* 父容器高度的一半 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">translate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">-50%</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">-50%</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="旋转rotate" tabindex="-1">旋转rotate() <a class="header-anchor" href="#旋转rotate" aria-label="Permalink to &quot;旋转rotate()&quot;">​</a></h3><blockquote><p>正值是顺时针旋转,负值是逆时针旋转</p></blockquote><ul><li><code>transform:rotate(度数);</code></li></ul><table><thead><tr><th>单位</th><th>含义</th></tr></thead><tbody><tr><td>deg</td><td><strong>角度</strong>(范围0~360°),例如<code>45deg</code>就是顺时针旋转45°</td></tr><tr><td>grad</td><td><strong>百分度</strong>.<code>1grad</code>相当于1/400个整圆.因此100grad就相当于90deg</td></tr><tr><td>rad</td><td><strong>弧度</strong>.<code>1rad</code>相当于<code>180/Π</code>°</td></tr><tr><td>turn</td><td><strong>圈数</strong>.<code>1turn</code>相当于360°,也就是是一圈</td></tr></tbody></table><h3 id="缩放scale" tabindex="-1">缩放scale() <a class="header-anchor" href="#缩放scale" aria-label="Permalink to &quot;缩放scale()&quot;">​</a></h3><blockquote><p>缩放支持x,y两个方向的变换.但是不支持百分比</p></blockquote><ol><li><p><code>transform:scale(x,y);</code></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">transform:scale(1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">1);</span><span style="color:#676E95;font-style:italic;">/* 宽和高都放大一倍,相当于没变 */</span></span>
<span class="line"><span style="color:#A6ACCD;">transform:scale(2); </span><span style="color:#676E95;font-style:italic;">/* 只写了一个参数,那第二个参数和第一个一样是scale(2,2) */</span></span>
<span class="line"><span style="color:#A6ACCD;">transform:scale(0</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">5</span><span style="color:#A6ACCD;">);</span><span style="color:#676E95;font-style:italic;">/* 缩小 */</span></span>
<span class="line"></span></code></pre></div></li><li><p>支持负值</p><ul><li>水平翻转<code>transform:scaleX(-1);</code></li><li>垂直翻转<code>transform:scaleY(-1);</code></li></ul></li></ol><ul><li>scale缩放最大的优势:可以设置旋转中心缩放,默认以中心点缩放,而且不影响其它盒子</li></ul><h4 id="zoom属性" tabindex="-1">zoom属性 <a class="header-anchor" href="#zoom属性" aria-label="Permalink to &quot;zoom属性&quot;">​</a></h4><blockquote><p>zoom:normal|reset|&lt;number&gt;|&lt;percntage&gt;</p></blockquote><ul><li>百分比值<code>zoom:50%</code>,数值<code>zoom:0.5</code>都表示缩小到原来的一半</li><li><code>normal</code>:相当于<code>zoom:1</code>.默认值</li><li><code>reset</code>:表示用户使用<code>Ctrl -</code>和<code>Ctrl +</code>进行缩放和放大(仅有Safria支持)</li></ul><blockquote><p>和scale()的一些区别</p></blockquote><ol><li>zoom是一个非标准的元素,scale()是一个标准的元素</li><li>占据尺寸空间.zoom会实时改变元素占据的空间大小.例如设置<img>的尺寸是<code>100px*150px</code>,如果应用<code>zoom:2</code>就会变成<code>200px*300px</code></li><li>zoom缩放中心坐标系相对于元素的左上角,并且是不可以改变的</li><li>zoom属性不会出翔trasnform属性后的变化.例如创建层叠上下文,影响fixed定位和overflow绝对定位的溢出隐藏</li></ol><h3 id="skew-斜切" tabindex="-1">skew()斜切 <a class="header-anchor" href="#skew-斜切" aria-label="Permalink to &quot;skew()斜切&quot;">​</a></h3><blockquote><p>支持x,y两个方向的斜切变换.并且支持所有的角度变换</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">class</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">skew</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">/* 或者分开写 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">skewX</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">skewY</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><code>skew(10deg)</code>可以看作是<code>skew(10deg,0)</code>的缩写,效果等同于<code>skewX(10deg)</code></li><li>旋转是360°一个轮回.斜切是180°一个轮回,元素处于90°或者270°斜切的时候是看不见的,会变成一条线</li></ul><h2 id="矩阵函数materix" tabindex="-1">矩阵函数materix() <a class="header-anchor" href="#矩阵函数materix" aria-label="Permalink to &quot;矩阵函数materix()&quot;">​</a></h2><blockquote><p>不管是唯一,旋转,缩放还是斜切,其本质都是应用矩阵函数<code>materix()</code>进行矩阵变换</p></blockquote><ul><li><p>下面值介绍二维变换的矩阵</p></li><li><p><code>transform:materix(a,b,c,d,e,f);</code>总共又六个参数</p><ul><li>materix六个参数是从上到下写的.后面的坐标变量就是转换之后的新坐标</li><li><img src="`+e+`" alt=" "></li><li>translate()函数等都是需要单位的,但是materix()就是单位省略的</li></ul></li></ul><ol><li>位移变换(translate)使用的矩阵参数是<code>e</code>和<code>f</code><ul><li>公式:<code>transform:metrix(a,b,c,d,水平偏移距离,垂直偏移距离)</code></li></ul></li><li>缩放变换(scale)使用的矩阵参数是<code>a</code>和<code>d</code><ul><li>公式:<code>transform:metrix(1,c,d,1,e,f)</code></li><li>a表示x轴缩放,d表示y轴缩放</li></ul></li><li>旋转变换(rotate)使用的矩阵变换参数是<code>a</code>,<code>b</code>,<code>c</code>,<code>d</code><ul><li>公式:<code>transform:meterix(cosα,sinα,-sinα,cosα,0,0)</code></li></ul></li><li>斜切变换(skew)使用的矩阵参数是<code>b</code>,<code>c</code><ul><li>公式:<code>transform:meterix(1,tan(αy),tan(αx),1,0,0)</code></li></ul></li></ol><ul><li>使用不同的变换就会产生不同的参数,参数之间有冲突问题,如果想同时使用可以使用空格分开表示</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">transform:materix(0</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">886</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">-0</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">886</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0) </span></span>
<span class="line"><span style="color:#A6ACCD;">   materix(3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">0)</span></span>
<span class="line"></span></code></pre></div><h2 id="旋转中心点transform-origin" tabindex="-1">旋转中心点transform-origin <a class="header-anchor" href="#旋转中心点transform-origin" aria-label="Permalink to &quot;旋转中心点transform-origin&quot;">​</a></h2><blockquote><p>变换默认是相对于元素的中心进行的,这个中心是由<code>transform-origin</code>属性决定的</p></blockquote><ul><li><code>transform-origin:x y z;</code>的默认值是.x轴50%,y轴50%,z轴0</li></ul><ol><li>z轴只支持数值</li><li>x轴,和y轴支持百分比,数值,关键字</li></ol><ul><li>属性的关键字是自带方位的,因此关键字可以颠倒</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* x | y */</span></span>
<span class="line"><span style="color:#FFCB6B;">transform-origin</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">right</span><span style="color:#A6ACCD;"> top;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* y | x */</span></span>
<span class="line"><span style="color:#FFCB6B;">transform-origin</span><span style="color:#A6ACCD;">:top right;</span></span>
<span class="line"></span></code></pre></div><ul><li>center的关键字是可以省略的.并且如果单个值,一般是省略另一个值50%(center)</li><li>由于<code>transform-origin</code>的默认值左边就是(0,0),不管是旋转还是位移他的中心点都是不会变换的,坐标还是(0,0)</li></ul><h2 id="_3d转换" tabindex="-1">3D转换 <a class="header-anchor" href="#_3d转换" aria-label="Permalink to &quot;3D转换&quot;">​</a></h2><blockquote><ul><li>3D位移变换函数包括<code>translateX()</code>,<code>translateY()</code>,和<code>translateZ()</code>.其中<code>translateX()</code>,<code>translateY()</code>是2D变换.只有<code>translateZ()</code>的是3D变换</li><li>CSS缩放函数(scale())依然只有<code>scaleZ()</code>属于3D变换</li><li>斜切skew()没有3D变换</li><li>旋转变换函数<code>rotate()</code>,<code>rotateX()</code>,<code>rotateY()</code>,<code>rotateZ()</code>均是属于3D变换的</li></ul></blockquote><ul><li>3D坐标,箭头所指的方向是偏移正值所对应的方向</li><li><img src="`+t+`" alt="3D坐标"></li></ul><h3 id="rotate3d" tabindex="-1">rotate3d() <a class="header-anchor" href="#rotate3d" aria-label="Permalink to &quot;rotate3d()&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">rotate3d(x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">z</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">angle)</span></span>
<span class="line"></span></code></pre></div><ul><li>angle表示绕着(0,0,0),(x,y,z)的向量旋转.正数表示顺时针,负数表示逆时针</li><li>例如以下就是表示绕着坐标(0,0,0)和(1,1,1)连成的向量线旋转45°</li><li><img src="`+p+'" alt="rotate3D"></li></ul><blockquote><p>然而rotate3d()很难被使用到,使用更高频率的是<code>rotateX()</code>,<code>rotateY()</code>,<code>rotateZ()</code></p></blockquote><ul><li><code>rotateX(angle)</code>:绕X轴旋转</li><li><code>rotateY(angle)</code>:绕Y轴旋转</li><li><code>rotateZ(angle)</code>:绕Z轴旋转</li></ul>',51),y=a("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"ROTATE",src:"https://codepen.io/jack-zhang-1314/embed/MWrYpOY?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/jack-zhang-1314/pen/MWrYpOY">
  ROTATE</a> by Jack-Zhang-1314 (<a href="https://codepen.io/jack-zhang-1314">@jack-zhang-1314</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),F=s(`<h3 id="perspective" tabindex="-1">perspective <a class="header-anchor" href="#perspective" aria-label="Permalink to &quot;perspective&quot;">​</a></h3><blockquote><p>perspective(透视)决定你所看到的画面是二维的还是三维的</p></blockquote><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">img</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">perspective</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>这就意味着这张图片的3D视觉效果和本人在距离1.2个显示器宽度 远的地方（1680×1.2≈2000）所看到的真实效果是一致的</li><li><img src="`+c+`" alt="perspective"></li></ul><blockquote><p><code>perspective</code>的两种写法</p></blockquote><ol><li><p>设置在3D渲染元素的共同父元素</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">stage</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">perspective</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">600px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">rotateY</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">45deg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>也可以设置在当前3D渲染元素</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">stage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">perspective</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">600px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rotateY</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">45deg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ol><ul><li>如果使用第一种,元素会把整个舞台作为透视元素,<span style="color:red;">也就是我们看到的每一个子元素共用同一个</span>因此每一个子元素的视觉形状都不一样,这个效果比较符合显示世界的3D效果</li><li>如果使用第二种写法,那么每个元素都有自己的透视点,并且旋转角度一样,每个元素看上去也一样</li></ul>`,7),C=a("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/jack-zhang-1314/embed/KKZwmRW?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/jack-zhang-1314/pen/KKZwmRW">
  Untitled</a> by Jack-Zhang-1314 (<a href="https://codepen.io/jack-zhang-1314">@jack-zhang-1314</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),h=s(`<h3 id="translatez" tabindex="-1">translateZ() <a class="header-anchor" href="#translatez" aria-label="Permalink to &quot;translateZ()&quot;">​</a></h3><blockquote><p><code>translateZ()</code>函数可以理解透视的位置,<code>translateZ()</code>可以控制元素在视觉上的远近距离</p></blockquote><ul><li>现在假设<strong>容器</strong>设置的透视为201px</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">perspective</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">201px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><p><strong>子元素的设置</strong>会出现以下几种情况:</p><ol><li>子元素设置<code>translateZ()</code>函数值越小,则子元素的视觉大小也越小</li><li>子元素设置<code>translateZ()</code>函数值越大,则子元素的视觉大小也越大</li><li>当子元素设置的<code>translateZ()</code>函数值非常接近201px时,但是不超过201px(如200px)的时候,该元素就会撑满整个屏幕</li><li>当子元素设置<code>translateZ()</code>函数值超过201px,就看不见该元素.因为该元素会移到透视点后面</li></ol><p><img src="`+r+'" alt="translateX"></p></li></ul><h3 id="perspective-origin" tabindex="-1">perspective-origin() <a class="header-anchor" href="#perspective-origin" aria-label="Permalink to &quot;perspective-origin()&quot;">​</a></h3><blockquote><p><code>perspective-origin:&lt;position&gt;</code>表示的时眼睛相对3D变换元素的位置</p></blockquote><p><img src="'+i+'" alt="perspective-origin"></p><ul><li><code>perspective-origin</code>的初始值为50% 50%,表示默认的透视点是舞台元素或者元素的中心</li></ul><h3 id="transform-style" tabindex="-1">transform-style <a class="header-anchor" href="#transform-style" aria-label="Permalink to &quot;transform-style&quot;">​</a></h3><blockquote><p><code>transform-style</code>支持两个属性:<code>preserve-3d</code>和<code>flat</code>.控制子元素是否开启三维立体环境</p></blockquote><ul><li><p><code>transform-style:flat;</code>(默认值)子元素不开启sd立体空间.<strong>渲染表现类似于二向箔</strong>.把三维空间的元素压缩在二维空间</p></li><li><p><code>transform-style:preserve-3d;</code>子元素开启sd立体空间</p></li></ul>',12),u=a("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/jack-zhang-1314/embed/JjMoJjz?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/jack-zhang-1314/pen/JjMoJjz">
  Untitled</a> by Jack-Zhang-1314 (<a href="https://codepen.io/jack-zhang-1314">@jack-zhang-1314</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),A=s('<h3 id="backface-visibility" tabindex="-1">backface-visibility <a class="header-anchor" href="#backface-visibility" aria-label="Permalink to &quot;backface-visibility&quot;">​</a></h3><blockquote><p>css世界中一个元素 背面会表现为其正唛你图像的镜像.因此,当我们使用翻转效果的是背面转向用户面前的时候,显示的是该元素的正面的图像镜像</p></blockquote><ul><li>如果实现扑克的翻转的3D效果.背面依然会和正面相同.所以这时候就需要隐藏背面</li><li><code>backface-visibility</code>支持以下两个属性 <ol><li><code>visible</code>(默认值),元素翻转式背面是可见的</li><li><code>hidden</code>元素翻转背面是不可见的</li></ol></li></ul>',3),m=a("iframe",{height:"300",style:{width:"100%"},scrolling:"no",title:"Untitled",src:"https://codepen.io/jack-zhang-1314/embed/NWXPgEM?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href="https://codepen.io/jack-zhang-1314/pen/NWXPgEM">
  Untitled</a> by Jack-Zhang-1314 (<a href="https://codepen.io/jack-zhang-1314">@jack-zhang-1314</a>)
  on <a href="https://codepen.io">CodePen</a>.
`,-1),g=s(`<ul><li>设置<code>backface-visibility:hidden</code>之后,绕y轴旋转225°后元素被隐藏了.由于<code>rotateY</code>在值大于180°,小于360°的时候,我们看到的就是元素的背面了</li><li><code>backface-visibility:visible</code>之后元素即使绕y轴旋转225°后还是清晰可见</li></ul><h3 id="_3d变换与性能加速" tabindex="-1">3D变换与性能加速 <a class="header-anchor" href="#_3d变换与性能加速" aria-label="Permalink to &quot;3D变换与性能加速&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">transform: translate(-100px</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 0); </span></span>
<span class="line"><span style="color:#A6ACCD;">transform: translate3d(-100px</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 0);</span></span>
<span class="line"></span></code></pre></div><ul><li>上面两种写法一模一样,不过使用3d可以开启GPU加速.变换效果性能要更高</li><li>单纯的2d变换完全没有理由去使用3d变换</li></ul>`,4),b=[D,y,F,C,h,u,A,m,g];function f(k,_,q,x,v,B){return n(),o("div",null,b)}const P=l(d,[["render",f]]);export{S as __pageData,P as default};
